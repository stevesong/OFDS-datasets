name: Generate PMTiles

on:
  push:
    branches: [main]
    paths:
      - '**/*.geojson'
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Tippecanoe
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libsqlite3-dev zlib1g-dev
          git clone https://github.com/felt/tippecanoe.git
          cd tippecanoe
          make -j
          sudo make install
      
      - name: Find all GeoJSON files
        id: find-geojson
        run: echo "GEOJSON_FILES=$(find . -name '*.geojson' | tr '\n' ' ')" >> $GITHUB_ENV
      
      - name: Generate PMTiles
        run: |
          tippecanoe -o ofds_networks.pmtiles -zg --drop-densest-as-needed $GEOJSON_FILES
      
      - name: Generate Optimized PMTiles
        run: |
          # Process each country/operator combination as a separate layer
          for country in $(find . -mindepth 1 -maxdepth 1 -type d -not -path "*/\.*" | sort); do
            countryName=$(basename $country)
            for operator in $(find $country -mindepth 1 -maxdepth 1 -type d | sort); do
              operatorName=$(basename $operator)
              
              # Create layer name
              layerName="${countryName}_${operatorName}"
              
              # Find nodes and spans
              nodesFile=$(find $operator -name "*nodes*.geojson")
              spansFile=$(find $operator -name "*spans*.geojson")
              
              # Add to tippecanoe commands
              if [ -n "$nodesFile" ]; then
                nodeArgs="$nodeArgs -L${layerName}_nodes:$nodesFile"
              fi
              
              if [ -n "$spansFile" ]; then
                spanArgs="$spanArgs -L${layerName}_spans:$spansFile"
              fi
            done
          done
          
          # Run tippecanoe with all collected layer arguments
          tippecanoe -o ofds_networks_by_layer.pmtiles -zg --drop-densest-as-needed $nodeArgs $spanArgs
      
      - name: Create simple HTML viewer
        run: |
          mkdir -p public
          cp ofds_networks.pmtiles public/
          cp ofds_networks_by_layer.pmtiles public/
          
          cat > public/index.html << 'EOL'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>OFDS Networks PMTiles Viewer</title>
            <script src="https://unpkg.com/maplibre-gl@3.3.0/dist/maplibre-gl.js"></script>
            <link href="https://unpkg.com/maplibre-gl@3.3.0/dist/maplibre-gl.css" rel="stylesheet" />
            <script src="https://unpkg.com/pmtiles@2.7.0/dist/index.js"></script>
            <style>
              body { margin: 0; padding: 0; }
              #map { position: absolute; top: 0; bottom: 0; width: 100%; }
              .map-overlay {
                position: absolute;
                top: 10px;
                right: 10px;
                background: rgba(255, 255, 255, 0.8);
                padding: 10px;
                border-radius: 3px;
              }
            </style>
          </head>
          <body>
            <div id="map"></div>
            <div class="map-overlay">
              <h3>OFDS Networks</h3>
              <div>
                <input type="radio" name="tileset" id="basic" value="basic" checked>
                <label for="basic">Combined PMTiles</label>
              </div>
              <div>
                <input type="radio" name="tileset" id="layered" value="layered">
                <label for="layered">Layered PMTiles</label>
              </div>
            </div>
            <script>
              // Initialize PMTiles protocol
              let protocol = new pmtiles.Protocol();
              maplibregl.addProtocol("pmtiles", protocol.tile);
              
              // Initialize map
              const map = new maplibregl.Map({
                container: 'map',
                style: 'https://demotiles.maplibre.org/style.json',
                center: [20, 0], // Center on Africa
                zoom: 3
              });
              
              // Functions to add sources and layers
              function addBasicPMTiles() {
                removeAllLayers();
                
                map.addSource('networks', {
                  type: 'vector',
                  url: 'pmtiles://ofds_networks.pmtiles'
                });
                
                map.addLayer({
                  'id': 'network-lines',
                  'type': 'line',
                  'source': 'networks',
                  'source-layer': '0', // Default layer name
                  'paint': {
                    'line-color': '#3388ff',
                    'line-width': 2
                  }
                });
                
                map.addLayer({
                  'id': 'network-points',
                  'type': 'circle',
                  'source': 'networks',
                  'source-layer': '0', // Default layer name
                  'filter': ['==', '$type', 'Point'],
                  'paint': {
                    'circle-radius': 4,
                    'circle-color': '#ff3333'
                  }
                });
              }
              
              function addLayeredPMTiles() {
                removeAllLayers();
                
                map.addSource('layered-networks', {
                  type: 'vector',
                  url: 'pmtiles://ofds_networks_by_layer.pmtiles'
                });
                
                // We'd need to dynamically add layers here based on what's in the tileset
                // For now, a simplified example
                const layers = ['Kenya_BCS_spans', 'Kenya_BCS_nodes', 'Nigeria_mtn_nigeria_spans'];
                const colors = ['#3388ff', '#ff3333', '#33ff33'];
                
                layers.forEach((layer, i) => {
                  const isNode = layer.includes('nodes');
                  const color = colors[i % colors.length];
                  
                  if (isNode) {
                    map.addLayer({
                      'id': layer,
                      'type': 'circle',
                      'source': 'layered-networks',
                      'source-layer': layer,
                      'paint': {
                        'circle-radius': 4,
                        'circle-color': color
                      }
                    });
                  } else {
                    map.addLayer({
                      'id': layer,
                      'type': 'line',
                      'source': 'layered-networks',
                      'source-layer': layer,
                      'paint': {
                        'line-color': color,
                        'line-width': 2
                      }
                    });
                  }
                });
              }
              
              function removeAllLayers() {
                // Remove existing sources and layers
                if (map.getSource('networks')) {
                  map.removeSource('networks');
                }
                if (map.getSource('layered-networks')) {
                  map.removeSource('layered-networks');
                }
              }
              
              // Add tileset radio button event listeners
              document.querySelectorAll('input[name="tileset"]').forEach(input => {
                input.addEventListener('change', (e) => {
                  if (e.target.value === 'basic') {
                    addBasicPMTiles();
                  } else {
                    addLayeredPMTiles();
                  }
                });
              });
              
              // Add initial PMTiles when map loads
              map.on('load', () => {
                addBasicPMTiles();
              });
            </script>
          </body>
          </html>
          EOL
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public