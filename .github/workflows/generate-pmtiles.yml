name: Generate and Upload PMTiles to S3

on:
  push:
    branches: [main]
    paths:
      - '**/*.geojson'
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Tippecanoe
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libsqlite3-dev zlib1g-dev
          git clone https://github.com/felt/tippecanoe.git
          cd tippecanoe
          make -j
          sudo make install
      
      - name: Generate One Layer Per Operator
        run: |
          # Create an array to store tippecanoe arguments
          tippecanoe_args=("-o" "ofds_networks_by_layer.pmtiles" "-zg" "--drop-densest-as-needed")
          tippecanoe_test_args=("-o" "ofds_networks_by_layer_test.pmtiles" "-Z8" "-z14" "--no-feature-limit" "--no-tile-size-limit" "--quiet")
          
          # Process each country directory
          for country in $(find . -mindepth 1 -maxdepth 1 -type d -not -path "*/\.*" -not -path "*/tippecanoe" | sort); do
            countryName=$(basename "$country")
            
            # Process each operator directory under this country
            for operator in $(find "$country" -mindepth 1 -maxdepth 1 -type d | sort); do
              operatorName=$(basename "$operator")
              
              # Create layer name from country and operator
              layerName="${countryName}_${operatorName}"
              
              # Find the nodes and spans files
              nodesFile=$(find "$operator" -name "*nodes*.geojson" | head -n 1)
              spansFile=$(find "$operator" -name "*spans*.geojson" | head -n 1)
              
              # If at least one file exists, create a layer
              if [ -n "$nodesFile" ] || [ -n "$spansFile" ]; then
                echo "Layer: $layerName"
                
                if [ -n "$nodesFile" ]; then
                  echo "  Nodes: $nodesFile"
                fi
                
                if [ -n "$spansFile" ]; then
                  echo "  Spans: $spansFile"
                fi
                
                # Add layer argument for each file individually
                if [ -n "$nodesFile" ]; then
                  tippecanoe_args+=("-L" "${layerName}:${nodesFile}")
                fi
                
                if [ -n "$spansFile" ]; then
                  tippecanoe_args+=("-L" "${layerName}:${spansFile}")
                fi
                
                # Save layer info for metadata
                echo "$layerName" >> layers_list.txt
              fi
            done
          done
          
          # Count layers
          layerCount=$(wc -l < layers_list.txt)
          echo "Found $layerCount operator layers"
          
          # Run tippecanoe if we have any layers
          if [ "$layerCount" -gt 0 ]; then
            # echo "Creating PMTiles with tippecanoe arguments: ${tippecanoe_args[@]}"
            # tippecanoe "${tippecanoe_args[@]}"
            echo "Creating test PMTiles with tippecanoe arguments: ${tippecanoe_test_args[@]}"
            tippecanoe "${tippecanoe_test_args[@]}"
            
            if [ $? -eq 0 ]; then
              echo "Successfully created PMTiles file"
            else
              echo "Error creating PMTiles file"
              exit 1
            fi
          else
            echo "No GeoJSON files found for processing"
            exit 1
          fi
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Upload PMTiles to S3
        run: |
          # Upload the PMTiles file to S3
          # aws s3 cp ofds_networks_by_layer.pmtiles s3://${{ secrets.S3_BUCKET_NAME }}/ofds_networks_by_layer.pmtiles --content-type 'application/octet-stream' --cache-control 'max-age=86400'
          aws s3 cp ofds_networks_by_layer_test.pmtiles s3://${{ secrets.S3_BUCKET_NAME }}/ofds_networks_by_layer_test.pmtiles --content-type 'application/octet-stream' --cache-control 'max-age=86400'

          # Upload the layer list for reference
          aws s3 cp layers_list.txt s3://${{ secrets.S3_BUCKET_NAME }}/ofds_layers_list.txt --content-type 'text/plain' --cache-control 'max-age=86400'
          
          # Create metadata JSON
          cat > pmtiles_metadata.json << EOF
          {
            "updated_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "layer_count": $layerCount,
            "files": {
              "layered": "https://${{ secrets.S3_BUCKET_NAME }}.s3.${{ secrets.AWS_REGION }}.amazonaws.com/ofds_networks_by_layer.pmtiles",
              "layer_list": "https://${{ secrets.S3_BUCKET_NAME }}.s3.${{ secrets.AWS_REGION }}.amazonaws.com/ofds_layers_list.txt"
            }
          }
          EOF
          
          aws s3 cp pmtiles_metadata.json s3://${{ secrets.S3_BUCKET_NAME }}/pmtiles_metadata.json --content-type 'application/json' --cache-control 'max-age=300'